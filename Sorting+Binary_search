class Solution {
public:
    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {
        vector<int> ans(queries.size());
        sort(items.begin(), items.end(), [](vector<int> &a, vector<int> &b){
            return a[0] < b[0];
        });

        int max_b = items[0][1];
        for(auto &item : items){
            max_b = max(max_b, item[1]);
            item[1] = max_b;
        }

        for(int i = 0; i < queries.size(); i++){
            ans[i] = binary_search(items, queries[i]);
        }
        return ans;
    }
    int binary_search(vector<vector<int>>& items, int target){
        int l = 0, r = items.size()-1;
        int max_beauty = 0;
        while(l <= r){
            int mid = (l+r)/2;
            if(items[mid][0] > target){
                r = mid - 1;
            }else{
                max_beauty = max(max_beauty, items[mid][1]);
                l = mid+1;
            }
        }
        return max_beauty;
    }
};
